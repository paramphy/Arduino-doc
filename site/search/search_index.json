{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino Tutorial \u00b6 Arduino is a prototype platform (open-source) based on an easy-to-use hardware and software. It consists of a circuit board, which can be programed (referred to as a microcontroller) and a ready-made software called Arduino IDE (Integrated Development Environment), which is used to write and upload the computer code to the physical board. Arduino provides a standard form factor that breaks the functions of the micro-controller into a more accessible package. Audience \u00b6 This tutorial is intended for enthusiastic students or hobbyists. With Arduino, one can get to know the basics of micro-controllers and sensors very quickly and can start building prototype with very little investment. This tutorial is intended to make you comfortable in getting started with Arduino and its various functions. Prerequisites \u00b6 Before you start proceeding with this tutorial, we assume that you are already familiar with the basics of C and C++. If you are not well aware of these concepts, then we will suggest you go through our short tutorials on C and C++. A basic understanding of microcontrollers and electronics is also expected.","title":"Arduino Tutorial"},{"location":"#arduino-tutorial","text":"Arduino is a prototype platform (open-source) based on an easy-to-use hardware and software. It consists of a circuit board, which can be programed (referred to as a microcontroller) and a ready-made software called Arduino IDE (Integrated Development Environment), which is used to write and upload the computer code to the physical board. Arduino provides a standard form factor that breaks the functions of the micro-controller into a more accessible package.","title":"Arduino Tutorial"},{"location":"#audience","text":"This tutorial is intended for enthusiastic students or hobbyists. With Arduino, one can get to know the basics of micro-controllers and sensors very quickly and can start building prototype with very little investment. This tutorial is intended to make you comfortable in getting started with Arduino and its various functions.","title":"Audience"},{"location":"#prerequisites","text":"Before you start proceeding with this tutorial, we assume that you are already familiar with the basics of C and C++. If you are not well aware of these concepts, then we will suggest you go through our short tutorials on C and C++. A basic understanding of microcontrollers and electronics is also expected.","title":"Prerequisites"},{"location":"Arduino%20Projects/Blinking%20LED/","text":"LEDs are small, powerful lights that are used in many different applications. To start, we will work on blinking an LED, the Hello World of microcontrollers. It is as simple as turning a light on and off. Establishing this important baseline will give you a solid foundation as we work towards experiments that are more complex. Components Required \u00b6 You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LED 1 \u00d7 330\u03a9 Resistor 2 \u00d7 Jumper Procedure \u00b6 Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Note \u2212 To find out the polarity of an LED, look at it closely. The shorter of the two legs, towards the flat edge of the bulb indicates the negative terminal. Sketch \u00b6 Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open the new sketch File by clicking New. Arduino Code \u00b6 /* Blink Turns on an LED on for one second, then off for one second, repeatedly. */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output. pinMode(2, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(2, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(2, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } Code to Note \u00b6 pinMode(2, OUTPUT) \u2212 Before you can use one of Arduino\u2019s pins, you need to tell Arduino Uno R3 whether it is an INPUT or OUTPUT. We use a built-in \u201cfunction\u201d called pinMode() to do this. digitalWrite(2, HIGH) \u2212 When you are using a pin as an OUTPUT, you can command it to be HIGH (output 5 volts), or LOW (output 0 volts). Result \u00b6 You should see your LED turn on and off. If the required output is not seen, make sure you have assembled the circuit correctly, and verified and uploaded the code to your board.","title":"Blinking LED"},{"location":"Arduino%20Projects/Blinking%20LED/#components-required","text":"You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LED 1 \u00d7 330\u03a9 Resistor 2 \u00d7 Jumper","title":"Components Required"},{"location":"Arduino%20Projects/Blinking%20LED/#procedure","text":"Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Note \u2212 To find out the polarity of an LED, look at it closely. The shorter of the two legs, towards the flat edge of the bulb indicates the negative terminal.","title":"Procedure"},{"location":"Arduino%20Projects/Blinking%20LED/#sketch","text":"Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open the new sketch File by clicking New.","title":"Sketch"},{"location":"Arduino%20Projects/Blinking%20LED/#arduino-code","text":"/* Blink Turns on an LED on for one second, then off for one second, repeatedly. */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output. pinMode(2, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(2, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(2, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second }","title":"Arduino Code"},{"location":"Arduino%20Projects/Blinking%20LED/#code-to-note","text":"pinMode(2, OUTPUT) \u2212 Before you can use one of Arduino\u2019s pins, you need to tell Arduino Uno R3 whether it is an INPUT or OUTPUT. We use a built-in \u201cfunction\u201d called pinMode() to do this. digitalWrite(2, HIGH) \u2212 When you are using a pin as an OUTPUT, you can command it to be HIGH (output 5 volts), or LOW (output 0 volts).","title":"Code to Note"},{"location":"Arduino%20Projects/Blinking%20LED/#result","text":"You should see your LED turn on and off. If the required output is not seen, make sure you have assembled the circuit correctly, and verified and uploaded the code to your board.","title":"Result"},{"location":"Arduino%20Projects/Fading%20LED/","text":"This example demonstrates the use of the analogWrite() function in fading an LED off. AnalogWrite uses pulse width modulation (PWM), turning a digital pin on and off very quickly with different ratios between on and off, to create a fading effect. Components Required \u00b6 You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LED 1 \u00d7 330\u03a9 Resistor 2 \u00d7 Jumper Procedure \u00b6 Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Note \u2212 To find out the polarity of an LED, look at it closely. The shorter of the two legs, towards the flat edge of the bulb indicates the negative terminal. Sketch \u00b6 Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open the new sketch File by clicking New. Arduino Code \u00b6 /* Fade This example shows how to fade an LED on pin 9 using the analogWrite() function. The analogWrite() function uses PWM, so if you want to change the pin you're using, be sure to use another PWM capable pin. On most Arduino, the PWM pins are identified with a \"~\" sign, like ~3, ~5, ~6, ~9, ~10 and ~11. */ int led = 9; // the PWM pin the LED is attached to int brightness = 0; // how bright the LED is int fadeAmount = 5; // how many points to fade the LED by // the setup routine runs once when you press reset: void setup() { // declare pin 9 to be an output: pinMode(led, OUTPUT); } // the loop routine runs over and over again forever: void loop() { // set the brightness of pin 9: analogWrite(led, brightness); // change the brightness for next time through the loop: brightness = brightness + fadeAmount; // reverse the direction of the fading at the ends of the fade: if (brightness == 0 || brightness == 255) { fadeAmount = -fadeAmount ; } // wait for 30 milliseconds to see the dimming effect delay(300); } Code to Note \u00b6 After declaring pin 9 as your LED pin, there is nothing to do in the setup() function of your code. The analogWrite() function that you will be using in the main loop of your code requires two arguments: One, telling the function which pin to write to and the other indicating what PWM value to write. In order to fade the LED off and on, gradually increase the PWM values from 0 (all the way off) to 255 (all the way on), and then back to 0, to complete the cycle. In the sketch given above, the PWM value is set using a variable called brightness. Each time through the loop, it increases by the value of the variable fadeAmount. If brightness is at either extreme of its value (either 0 or 255), then fadeAmount is changed to its negative. In other words, if fadeAmount is 5, then it is set to -5. If it is -5, then it is set to 5. The next time through the loop, this change causes brightness to change direction as well. analogWrite() can change the PWM value very fast, so the delay at the end of the sketch controls the speed of the fade. Try changing the value of the delay and see how it changes the fading effect. Result \u00b6 You should see your LED brightness change gradually.","title":"Fading LED"},{"location":"Arduino%20Projects/Fading%20LED/#components-required","text":"You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LED 1 \u00d7 330\u03a9 Resistor 2 \u00d7 Jumper","title":"Components Required"},{"location":"Arduino%20Projects/Fading%20LED/#procedure","text":"Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Note \u2212 To find out the polarity of an LED, look at it closely. The shorter of the two legs, towards the flat edge of the bulb indicates the negative terminal.","title":"Procedure"},{"location":"Arduino%20Projects/Fading%20LED/#sketch","text":"Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open the new sketch File by clicking New.","title":"Sketch"},{"location":"Arduino%20Projects/Fading%20LED/#arduino-code","text":"/* Fade This example shows how to fade an LED on pin 9 using the analogWrite() function. The analogWrite() function uses PWM, so if you want to change the pin you're using, be sure to use another PWM capable pin. On most Arduino, the PWM pins are identified with a \"~\" sign, like ~3, ~5, ~6, ~9, ~10 and ~11. */ int led = 9; // the PWM pin the LED is attached to int brightness = 0; // how bright the LED is int fadeAmount = 5; // how many points to fade the LED by // the setup routine runs once when you press reset: void setup() { // declare pin 9 to be an output: pinMode(led, OUTPUT); } // the loop routine runs over and over again forever: void loop() { // set the brightness of pin 9: analogWrite(led, brightness); // change the brightness for next time through the loop: brightness = brightness + fadeAmount; // reverse the direction of the fading at the ends of the fade: if (brightness == 0 || brightness == 255) { fadeAmount = -fadeAmount ; } // wait for 30 milliseconds to see the dimming effect delay(300); }","title":"Arduino Code"},{"location":"Arduino%20Projects/Fading%20LED/#code-to-note","text":"After declaring pin 9 as your LED pin, there is nothing to do in the setup() function of your code. The analogWrite() function that you will be using in the main loop of your code requires two arguments: One, telling the function which pin to write to and the other indicating what PWM value to write. In order to fade the LED off and on, gradually increase the PWM values from 0 (all the way off) to 255 (all the way on), and then back to 0, to complete the cycle. In the sketch given above, the PWM value is set using a variable called brightness. Each time through the loop, it increases by the value of the variable fadeAmount. If brightness is at either extreme of its value (either 0 or 255), then fadeAmount is changed to its negative. In other words, if fadeAmount is 5, then it is set to -5. If it is -5, then it is set to 5. The next time through the loop, this change causes brightness to change direction as well. analogWrite() can change the PWM value very fast, so the delay at the end of the sketch controls the speed of the fade. Try changing the value of the delay and see how it changes the fading effect.","title":"Code to Note"},{"location":"Arduino%20Projects/Fading%20LED/#result","text":"You should see your LED brightness change gradually.","title":"Result"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/","text":"This example will show you how to read an analog input on analog pin 0. The input is converted from analogRead() into voltage, and printed out to the serial monitor of the Arduino Software (IDE). Components Required \u00b6 You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 5K variable resistor (potentiometer) 2 \u00d7 Jumper Procedure \u00b6 Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Potentiometer \u00b6 A potentiometer (or pot) is a simple electro-mechanical transducer. It converts rotary or linear motion from the input operator into a change of resistance. This change is (or can be) used to control anything from the volume of a hi-fi system to the direction of a huge container ship. The pot as we know it was originally known as a rheostat (essentially a variable wirewound resistor). The variety of available pots is now quite astonishing, and it can be very difficult for the beginner (in particular) to work out which type is suitable for a given task. A few different pot types, which can all be used for the same task makes the job harder. The image on the right shows the standard schematic symbol of a pot. The image on the left is the potentiometer. Sketch \u00b6 Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open a new sketch File by clicking New. Arduino Code \u00b6 /* ReadAnalogVoltage Reads an analog input on pin 0, converts it to voltage, and prints the result to the serial monitor. Graphical representation is available using serial plotter (Tools > Serial Plotter menu) Attach the center pin of a potentiometer to pin A0, and the outside pins to +5V and ground. */ // the setup routine runs once when you press reset: void setup() { // initialize serial communication at 9600 bits per second: Serial.begin(9600); } // the loop routine runs over and over again forever: void loop() { // read the input on analog pin 0: int sensorValue = analogRead(A0); // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V): float voltage = sensorValue * (5.0 / 1023.0); // print out the value you read: Serial.println(voltage); } Code to Note \u00b6 In the program or sketch given below, the first thing that you do in the setup function is begin serial communications, at 9600 bits per second, between your board and your computer with the line \u2212 Serial.begin(9600); In the main loop of your code, you need to establish a variable to store the resistance value (which will be between 0 and 1023, perfect for an int datatype) coming from your potentiometer \u2212 int sensorValue = analogRead(A0); To change the values from 0-1023 to a range that corresponds to the voltage, the pin is reading, you need to create another variable, a float, and do a little calculation. To scale the numbers between 0.0 and 5.0, divide 5.0 by 1023.0 and multiply that by sensorValue \u2212 float voltage= sensorValue * (5.0 / 1023.0); Finally, you need to print this information to your serial window. You can do this with the command Serial.println() in your last line of code \u2212 Serial.println(voltage) Now, open Serial Monitor in the Arduino IDE by clicking the icon on the right side of the top green bar or pressing Ctrl+Shift+M. Result \u00b6 You will see a steady stream of numbers ranging from 0.0 - 5.0. As you turn the pot, the values will change, corresponding to the voltage at pin A0.","title":"Reading Analog Voltage"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#components-required","text":"You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 5K variable resistor (potentiometer) 2 \u00d7 Jumper","title":"Components Required"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#procedure","text":"Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below.","title":"Procedure"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#potentiometer","text":"A potentiometer (or pot) is a simple electro-mechanical transducer. It converts rotary or linear motion from the input operator into a change of resistance. This change is (or can be) used to control anything from the volume of a hi-fi system to the direction of a huge container ship. The pot as we know it was originally known as a rheostat (essentially a variable wirewound resistor). The variety of available pots is now quite astonishing, and it can be very difficult for the beginner (in particular) to work out which type is suitable for a given task. A few different pot types, which can all be used for the same task makes the job harder. The image on the right shows the standard schematic symbol of a pot. The image on the left is the potentiometer.","title":"Potentiometer"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#sketch","text":"Open the Arduino IDE software on your computer. Coding in the Arduino language will control your circuit. Open a new sketch File by clicking New.","title":"Sketch"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#arduino-code","text":"/* ReadAnalogVoltage Reads an analog input on pin 0, converts it to voltage, and prints the result to the serial monitor. Graphical representation is available using serial plotter (Tools > Serial Plotter menu) Attach the center pin of a potentiometer to pin A0, and the outside pins to +5V and ground. */ // the setup routine runs once when you press reset: void setup() { // initialize serial communication at 9600 bits per second: Serial.begin(9600); } // the loop routine runs over and over again forever: void loop() { // read the input on analog pin 0: int sensorValue = analogRead(A0); // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V): float voltage = sensorValue * (5.0 / 1023.0); // print out the value you read: Serial.println(voltage); }","title":"Arduino Code"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#code-to-note","text":"In the program or sketch given below, the first thing that you do in the setup function is begin serial communications, at 9600 bits per second, between your board and your computer with the line \u2212 Serial.begin(9600); In the main loop of your code, you need to establish a variable to store the resistance value (which will be between 0 and 1023, perfect for an int datatype) coming from your potentiometer \u2212 int sensorValue = analogRead(A0); To change the values from 0-1023 to a range that corresponds to the voltage, the pin is reading, you need to create another variable, a float, and do a little calculation. To scale the numbers between 0.0 and 5.0, divide 5.0 by 1023.0 and multiply that by sensorValue \u2212 float voltage= sensorValue * (5.0 / 1023.0); Finally, you need to print this information to your serial window. You can do this with the command Serial.println() in your last line of code \u2212 Serial.println(voltage) Now, open Serial Monitor in the Arduino IDE by clicking the icon on the right side of the top green bar or pressing Ctrl+Shift+M.","title":"Code to Note"},{"location":"Arduino%20Projects/Reading%20Analog%20Voltage/#result","text":"You will see a steady stream of numbers ranging from 0.0 - 5.0. As you turn the pot, the values will change, corresponding to the voltage at pin A0.","title":"Result"},{"location":"Arduino%20Projects/Temperature%20Sensor/","text":"The Temperature Sensor LM35 series are precision integrated-circuit temperature devices with an output voltage linearly proportional to the Centigrade temperature. The LM35 device has an advantage over linear temperature sensors calibrated in Kelvin, as the user is not required to subtract a large constant voltage from the output to obtain convenient Centigrade scaling. The LM35 device does not require any external calibration or trimming to provide typical accuracies of \u00b1\u00bc\u00b0C at room temperature and \u00b1\u00be\u00b0C over a full \u221255\u00b0C to 150\u00b0C temperature range. LM35 device Technical Specifications \u00b6 Calibrated directly in Celsius (Centigrade) Linear + 10-mV/\u00b0C scale factor 0.5\u00b0C ensured accuracy (at 25\u00b0C) Rated for full \u221255\u00b0C to 150\u00b0C range Suitable for remote applications Components Required \u00b6 You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LM35 sensor Procedure \u00b6 Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below. Arduino Code \u00b6 float temp; int tempPin = 0; void setup() { Serial.begin(9600); } void loop() { temp = analogRead(tempPin); // read analog volt from sensor and save to variable temp temp = temp * 0.48828125; // convert the analog volt to its temperature equivalent Serial.print(\"TEMPERATURE = \"); Serial.print(temp); // display temperature value Serial.print(\"*C\"); Serial.println(); delay(1000); // update sensor reading each one second } Code to Note \u00b6 LM35 sensor has three terminals - Vs, Vout and GND. We will connect the sensor as follows \u2212 Connect the +Vs to +5v on your Arduino board. Connect Vout to Analog0 or A0 on Arduino board. Connect GND with GND on Arduino. The Analog to Digital Converter (ADC) converts analog values into a digital approximation based on the formula ADC Value = sample * 1024 / reference voltage (+5v). So with a +5 volt reference, the digital approximation will be equal to input voltage * 205. Result \u00b6 You will see the temperature display on the serial port monitor which is updated every second.","title":"Temperature Sensor"},{"location":"Arduino%20Projects/Temperature%20Sensor/#technical-specifications","text":"Calibrated directly in Celsius (Centigrade) Linear + 10-mV/\u00b0C scale factor 0.5\u00b0C ensured accuracy (at 25\u00b0C) Rated for full \u221255\u00b0C to 150\u00b0C range Suitable for remote applications","title":"Technical Specifications"},{"location":"Arduino%20Projects/Temperature%20Sensor/#components-required","text":"You will need the following components \u2212 1 \u00d7 Breadboard 1 \u00d7 Arduino Uno R3 1 \u00d7 LM35 sensor","title":"Components Required"},{"location":"Arduino%20Projects/Temperature%20Sensor/#procedure","text":"Follow the circuit diagram and hook up the components on the breadboard as shown in the image given below.","title":"Procedure"},{"location":"Arduino%20Projects/Temperature%20Sensor/#arduino-code","text":"float temp; int tempPin = 0; void setup() { Serial.begin(9600); } void loop() { temp = analogRead(tempPin); // read analog volt from sensor and save to variable temp temp = temp * 0.48828125; // convert the analog volt to its temperature equivalent Serial.print(\"TEMPERATURE = \"); Serial.print(temp); // display temperature value Serial.print(\"*C\"); Serial.println(); delay(1000); // update sensor reading each one second }","title":"Arduino Code"},{"location":"Arduino%20Projects/Temperature%20Sensor/#code-to-note","text":"LM35 sensor has three terminals - Vs, Vout and GND. We will connect the sensor as follows \u2212 Connect the +Vs to +5v on your Arduino board. Connect Vout to Analog0 or A0 on Arduino board. Connect GND with GND on Arduino. The Analog to Digital Converter (ADC) converts analog values into a digital approximation based on the formula ADC Value = sample * 1024 / reference voltage (+5v). So with a +5 volt reference, the digital approximation will be equal to input voltage * 205.","title":"Code to Note"},{"location":"Arduino%20Projects/Temperature%20Sensor/#result","text":"You will see the temperature display on the serial port monitor which is updated every second.","title":"Result"},{"location":"Chapter-1/Arduino-Board-Description/","text":"Arduino-Board-Description \u00b6 In this chapter, we will learn about the different components on the Arduino board. We will study the Arduino UNO board because it is the most popular board in the Arduino board family. In addition, it is the best board to get started with electronics and coding. Some boards look a bit different from the one given below, but most Arduinos have majority of these components in common.","title":"Arduino-Board-Description"},{"location":"Chapter-1/Arduino-Board-Description/#arduino-board-description","text":"In this chapter, we will learn about the different components on the Arduino board. We will study the Arduino UNO board because it is the most popular board in the Arduino board family. In addition, it is the best board to get started with electronics and coding. Some boards look a bit different from the one given below, but most Arduinos have majority of these components in common.","title":"Arduino-Board-Description"},{"location":"Chapter-1/Arduino-Overview/","text":"Arduino - Overview \u00b6 Arduino is a prototype platform (open-source) based on an easy-to-use hardware and software. It consists of a circuit board, which can be programed (referred to as a microcontroller) and a ready-made software called Arduino IDE (Integrated Development Environment), which is used to write and upload the computer code to the physical board. The key features are \u2212 Arduino boards are able to read analog or digital input signals from different sensors and turn it into an output such as activating a motor, turning LED on/off, connect to the cloud and many other actions. You can control your board functions by sending a set of instructions to the microcontroller on the board via Arduino IDE (referred to as uploading software). Unlike most previous programmable circuit boards, Arduino does not need an extra piece of hardware (called a programmer) in order to load a new code onto the board. You can simply use a USB cable. Additionally, the Arduino IDE uses a simplified version of C++, making it easier to learn to program. Finally, Arduino provides a standard form factor that breaks the functions of the micro-controller into a more accessible package. Arduino Board and IDE(Integrated Development Environment) \u00b6 Board Types \u00b6 Various kinds of Arduino boards are available depending on different microcontrollers used. However, all Arduino boards have one thing in common: they are programed through the Arduino IDE. The differences are based on the number of inputs and outputs (the number of sensors, LEDs, and buttons you can use on a single board), speed, operating voltage, form factor etc. Some boards are designed to be embedded and have no programming interface (hardware), which you would need to buy separately. Some can run directly from a 3.7V battery, others need at least 5V. Here is a list of different Arduino boards available.","title":"Arduino-Overview"},{"location":"Chapter-1/Arduino-Overview/#arduino-overview","text":"Arduino is a prototype platform (open-source) based on an easy-to-use hardware and software. It consists of a circuit board, which can be programed (referred to as a microcontroller) and a ready-made software called Arduino IDE (Integrated Development Environment), which is used to write and upload the computer code to the physical board. The key features are \u2212 Arduino boards are able to read analog or digital input signals from different sensors and turn it into an output such as activating a motor, turning LED on/off, connect to the cloud and many other actions. You can control your board functions by sending a set of instructions to the microcontroller on the board via Arduino IDE (referred to as uploading software). Unlike most previous programmable circuit boards, Arduino does not need an extra piece of hardware (called a programmer) in order to load a new code onto the board. You can simply use a USB cable. Additionally, the Arduino IDE uses a simplified version of C++, making it easier to learn to program. Finally, Arduino provides a standard form factor that breaks the functions of the micro-controller into a more accessible package.","title":"Arduino - Overview"},{"location":"Chapter-1/Arduino-Overview/#arduino-board-and-ideintegrated-development-environment","text":"","title":"Arduino Board and IDE(Integrated Development Environment)"},{"location":"Chapter-1/Arduino-Overview/#board-types","text":"Various kinds of Arduino boards are available depending on different microcontrollers used. However, all Arduino boards have one thing in common: they are programed through the Arduino IDE. The differences are based on the number of inputs and outputs (the number of sensors, LEDs, and buttons you can use on a single board), speed, operating voltage, form factor etc. Some boards are designed to be embedded and have no programming interface (hardware), which you would need to buy separately. Some can run directly from a 3.7V battery, others need at least 5V. Here is a list of different Arduino boards available.","title":"Board Types"},{"location":"Chapter-1/Installation/","text":"Installation \u00b6 In this section, we will learn in easy steps, how to set up the Arduino IDE on our computer and prepare the board to receive the program via USB cable. After learning about the main parts of the Arduino UNO board, we are ready to learn how to set up the Arduino IDE. Once we learn this, we will be ready to upload our program on the Arduino board. In this section, we will learn in easy steps, how to set up the Arduino IDE on our computer and prepare the board to receive the program via USB cable. Step 1 First you must have your Arduino board (you can choose your favorite board) and a USB cable. In this case you use Arduino UNO you will need a standard USB cable (A plug to B plug), the kind you would connect to a USB printer as shown in the above image. Step-2-Download Arduino IDE Software. You can get different versions of Arduino IDE from the Download page on the Arduino Official website. You must select your software, which is compatible with your operating system (Windows, IOS, or Linux). After your file download is complete, unzip the file. Step 3 \u2212 Power up your board. The Arduino Uno, Mega, Duemilanove and Arduino Nano automatically draw power from either, the USB connection to the computer or an external power supply. If you are using an Arduino Diecimila, you have to make sure that the board is configured to draw power from the USB connection. The power source is selected with a jumper, a small piece of plastic that fits onto two of the three pins between the USB and power jacks. Check that it is on the two pins closest to the USB port. Connect the Arduino board to your computer using the USB cable. The green power LED (labeled PWR) should glow. Step 4 \u2212 Launch Arduino IDE. After your Arduino IDE software is downloaded, you need to unzip the folder. Inside the folder, you can find the application icon with an infinity label (application.exe). Double-click the icon to start the IDE. Step 5 \u2212 Open your first project. Once the software starts, you have two options \u2212 Create a new project. Open an existing project example. To create a new project, select File \u2192 New. To open an existing project example, select File \u2192 Example \u2192 Basics \u2192 Blink. Open Project Here, we are selecting just one of the examples with the name Blink. It turns the LED on and off with some time delay. You can select any other example from the list. Step 6 \u2212 Select your Arduino board. Here, we have selected Arduino Uno board according to our tutorial, but you must select the name matching the board that you are using. Step 7 \u2212 Select your serial port. Step 8 \u2212 Upload the program to your board. Before explaining how we can upload our program to the board, we must demonstrate the function of each symbol appearing in the Arduino IDE toolbar. A \u2212 Used to check if there is any compilation error. B \u2212 Used to upload a program to the Arduino board. C \u2212 Shortcut used to create a new sketch. D \u2212 Used to directly open one of the example sketch. E \u2212 Used to save your sketch. F \u2212 Serial monitor used to receive serial data from the board and send the serial data to the board. Now, simply click the \u201cUpload\u201d button in the environment. Wait a few seconds; you will see the RX and TX LEDs on the board, flashing. If the upload is successful, the message \u201cDone uploading\u201d will appear in the status bar.","title":"Installation"},{"location":"Chapter-1/Installation/#installation","text":"In this section, we will learn in easy steps, how to set up the Arduino IDE on our computer and prepare the board to receive the program via USB cable. After learning about the main parts of the Arduino UNO board, we are ready to learn how to set up the Arduino IDE. Once we learn this, we will be ready to upload our program on the Arduino board. In this section, we will learn in easy steps, how to set up the Arduino IDE on our computer and prepare the board to receive the program via USB cable. Step 1 First you must have your Arduino board (you can choose your favorite board) and a USB cable. In this case you use Arduino UNO you will need a standard USB cable (A plug to B plug), the kind you would connect to a USB printer as shown in the above image. Step-2-Download Arduino IDE Software. You can get different versions of Arduino IDE from the Download page on the Arduino Official website. You must select your software, which is compatible with your operating system (Windows, IOS, or Linux). After your file download is complete, unzip the file. Step 3 \u2212 Power up your board. The Arduino Uno, Mega, Duemilanove and Arduino Nano automatically draw power from either, the USB connection to the computer or an external power supply. If you are using an Arduino Diecimila, you have to make sure that the board is configured to draw power from the USB connection. The power source is selected with a jumper, a small piece of plastic that fits onto two of the three pins between the USB and power jacks. Check that it is on the two pins closest to the USB port. Connect the Arduino board to your computer using the USB cable. The green power LED (labeled PWR) should glow. Step 4 \u2212 Launch Arduino IDE. After your Arduino IDE software is downloaded, you need to unzip the folder. Inside the folder, you can find the application icon with an infinity label (application.exe). Double-click the icon to start the IDE. Step 5 \u2212 Open your first project. Once the software starts, you have two options \u2212 Create a new project. Open an existing project example. To create a new project, select File \u2192 New. To open an existing project example, select File \u2192 Example \u2192 Basics \u2192 Blink. Open Project Here, we are selecting just one of the examples with the name Blink. It turns the LED on and off with some time delay. You can select any other example from the list. Step 6 \u2212 Select your Arduino board. Here, we have selected Arduino Uno board according to our tutorial, but you must select the name matching the board that you are using. Step 7 \u2212 Select your serial port. Step 8 \u2212 Upload the program to your board. Before explaining how we can upload our program to the board, we must demonstrate the function of each symbol appearing in the Arduino IDE toolbar. A \u2212 Used to check if there is any compilation error. B \u2212 Used to upload a program to the Arduino board. C \u2212 Shortcut used to create a new sketch. D \u2212 Used to directly open one of the example sketch. E \u2212 Used to save your sketch. F \u2212 Serial monitor used to receive serial data from the board and send the serial data to the board. Now, simply click the \u201cUpload\u201d button in the environment. Wait a few seconds; you will see the RX and TX LEDs on the board, flashing. If the upload is successful, the message \u201cDone uploading\u201d will appear in the status bar.","title":"Installation"},{"location":"Chapter-2/Control%20Statements/","text":"Decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program. It should be along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false. Following is the general form of a typical decision making structure found in most of the programming languages \u2212 Control Statements are elements in Source Code that control the flow of program execution. They are the following If statement \u00b6 Different forms of if statement \u00b6 Form 1 if (expression) statement; You can use the if statement without braces { } if you have one statement. Form 2 if (expression) { Block of statements; } Example \u00b6 /* Global variable definition */ int A = 5 ; int B = 9 ; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ A++; /* check the boolean condition */ If ( ( A < B ) && ( B != 0 )) /* if condition is true then execute the following statement*/ { A += B; B--; } } If \u2026else statement \u00b6 An if statement can be followed by an optional else statement, which executes when the expression is false. if \u2026 else Statement Syntax \u00b6 if (expression) { Block of statements; } else { Block of statements; } Example \u00b6 /* Global variable definition */ int A = 5 ; int B = 9 ; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ { A++; }else { B -= A; } } If\u2026else if \u2026else statement \u00b6 The if statement can be followed by an optional else if\u2026else statement, which is very useful to test various conditions using single if\u2026else if statement. When using if\u2026else if\u2026else statements, keep in mind \u2212 An if can have zero or one else statement and it must come after any else if\u2019s. An if can have zero to many else if statements and they must come before the else. Once an else if succeeds, none of the remaining else if or else statements will be tested. if \u2026 else if \u2026else Statements Syntax \u00b6 if (expression_1) { Block of statements; } else if(expression_2) { Block of statements; } . . . else { Block of statements; } Example \u00b6 /* Global variable definition */ int A = 5 ; int B = 9 ; int c = 15; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ { A++; } /* check the boolean condition */ else if ((A == B )||( B < c) ) /* if condition is true then execute the following statement*/ { C = B* A; }else c++; } switch case statement \u00b6 Similar to the if statements, switch\u2026case controls the flow of programs by allowing the programmers to specify different codes that should be executed in various conditions. In particular, a switch statement compares the value of a variable to the values specified in the case statements. When a case statement is found whose value matches that of the variable, the code in that case statement is run. The break keyword makes the switch statement exit, and is typically used at the end of each case. Without a break statement, the switch statement will continue executing the following expressions (\u201cfalling-through\u201d) until a break, or the end of the switch statement is reached. ## Switch Case Statement Syntax switch (variable) { case label: // statements break; } case label: { // statements break; } default: { // statements break; } Example \u00b6 Here is a simple example with switch. Suppose we have a variable phase with only 3 different states (0, 1, or 2) and a corresponding function (event) for each of these states. This is how we could switch the code to the appropriate routine \u2212 switch (phase) { case 0: Lo(); break; case 1: Mid(); break; case 2: Hi(); break; default: Message(\"Invalid state!\"); } Conditional Operator ? : \u00b6 The conditional operator ? : is the only ternary operator in C. ? : conditional operator Syntax \u00b6 expression1 ? expression2 : expression3 Expression1 is evaluated first. If its value is true, then expression2 is evaluated and expression3 is ignored. If expression1 is evaluated as false, then expression3 evaluates and expression2 is ignored. The result will be a value of either expression2 or expression3 depending upon which of them evaluates as True. Conditional operator associates from right to left. Example \u00b6 /* Find max(a, b): */ max = ( a > b ) ? a : b; /* Convert small letter to capital: */ /* (no parentheses are actually necessary) */ c = ( c >= 'a' && c <= 'z' ) ? ( c - 32 ) : c; Rules of Conditional Operator \u00b6 expression1 must be a scalar expression; expression2 and expression3 must obey one of the following rules. Both expressions have to be of arithmetic type. expression2 and expression3 are subjected to usual arithmetic conversions, which determines the resulting type. Both expressions have to be of void type. The resulting type is void.","title":"Control Statements"},{"location":"Chapter-2/Control%20Statements/#if-statement","text":"","title":"If statement"},{"location":"Chapter-2/Control%20Statements/#different-forms-of-if-statement","text":"Form 1 if (expression) statement; You can use the if statement without braces { } if you have one statement. Form 2 if (expression) { Block of statements; }","title":"Different forms of if statement"},{"location":"Chapter-2/Control%20Statements/#example","text":"/* Global variable definition */ int A = 5 ; int B = 9 ; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ A++; /* check the boolean condition */ If ( ( A < B ) && ( B != 0 )) /* if condition is true then execute the following statement*/ { A += B; B--; } }","title":"Example"},{"location":"Chapter-2/Control%20Statements/#if-else-statement","text":"An if statement can be followed by an optional else statement, which executes when the expression is false.","title":"If \u2026else statement"},{"location":"Chapter-2/Control%20Statements/#if-else-statement-syntax","text":"if (expression) { Block of statements; } else { Block of statements; }","title":"if \u2026 else Statement Syntax"},{"location":"Chapter-2/Control%20Statements/#example_1","text":"/* Global variable definition */ int A = 5 ; int B = 9 ; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ { A++; }else { B -= A; } }","title":"Example"},{"location":"Chapter-2/Control%20Statements/#ifelse-if-else-statement","text":"The if statement can be followed by an optional else if\u2026else statement, which is very useful to test various conditions using single if\u2026else if statement. When using if\u2026else if\u2026else statements, keep in mind \u2212 An if can have zero or one else statement and it must come after any else if\u2019s. An if can have zero to many else if statements and they must come before the else. Once an else if succeeds, none of the remaining else if or else statements will be tested.","title":"If\u2026else if \u2026else statement"},{"location":"Chapter-2/Control%20Statements/#if-else-if-else-statements-syntax","text":"if (expression_1) { Block of statements; } else if(expression_2) { Block of statements; } . . . else { Block of statements; }","title":"if \u2026 else if \u2026else Statements Syntax"},{"location":"Chapter-2/Control%20Statements/#example_2","text":"/* Global variable definition */ int A = 5 ; int B = 9 ; int c = 15; Void setup () { } Void loop () { /* check the boolean condition */ if (A > B) /* if condition is true then execute the following statement*/ { A++; } /* check the boolean condition */ else if ((A == B )||( B < c) ) /* if condition is true then execute the following statement*/ { C = B* A; }else c++; }","title":"Example"},{"location":"Chapter-2/Control%20Statements/#switch-case-statement","text":"Similar to the if statements, switch\u2026case controls the flow of programs by allowing the programmers to specify different codes that should be executed in various conditions. In particular, a switch statement compares the value of a variable to the values specified in the case statements. When a case statement is found whose value matches that of the variable, the code in that case statement is run. The break keyword makes the switch statement exit, and is typically used at the end of each case. Without a break statement, the switch statement will continue executing the following expressions (\u201cfalling-through\u201d) until a break, or the end of the switch statement is reached. ## Switch Case Statement Syntax switch (variable) { case label: // statements break; } case label: { // statements break; } default: { // statements break; }","title":"switch case statement"},{"location":"Chapter-2/Control%20Statements/#example_3","text":"Here is a simple example with switch. Suppose we have a variable phase with only 3 different states (0, 1, or 2) and a corresponding function (event) for each of these states. This is how we could switch the code to the appropriate routine \u2212 switch (phase) { case 0: Lo(); break; case 1: Mid(); break; case 2: Hi(); break; default: Message(\"Invalid state!\"); }","title":"Example"},{"location":"Chapter-2/Control%20Statements/#conditional-operator","text":"The conditional operator ? : is the only ternary operator in C.","title":"Conditional Operator ? :"},{"location":"Chapter-2/Control%20Statements/#conditional-operator-syntax","text":"expression1 ? expression2 : expression3 Expression1 is evaluated first. If its value is true, then expression2 is evaluated and expression3 is ignored. If expression1 is evaluated as false, then expression3 evaluates and expression2 is ignored. The result will be a value of either expression2 or expression3 depending upon which of them evaluates as True. Conditional operator associates from right to left.","title":"? : conditional operator Syntax"},{"location":"Chapter-2/Control%20Statements/#example_4","text":"/* Find max(a, b): */ max = ( a > b ) ? a : b; /* Convert small letter to capital: */ /* (no parentheses are actually necessary) */ c = ( c >= 'a' && c <= 'z' ) ? ( c - 32 ) : c;","title":"Example"},{"location":"Chapter-2/Control%20Statements/#rules-of-conditional-operator","text":"expression1 must be a scalar expression; expression2 and expression3 must obey one of the following rules. Both expressions have to be of arithmetic type. expression2 and expression3 are subjected to usual arithmetic conversions, which determines the resulting type. Both expressions have to be of void type. The resulting type is void.","title":"Rules of Conditional Operator"},{"location":"Chapter-2/Data%20Types/","text":"Data Types \u00b6 Data types in C refers to an extensive system used for declaring variables or functions of different types. The type of a variable determines how much space it occupies in the storage and how the bit pattern stored is interpreted. The following table provides all the data types that you will use during Arduino programming. void Boolean char Unsigned char byte int Unsigned int word long Unsigned long short float double array String-char array String-object void \u00b6 The void keyword is used only in function declarations. It indicates that the function is expected to return no information to the function from which it was called. Example \u00b6 Void Loop ( ) { // rest of the code } Boolean \u00b6 A Boolean holds one of two values, true or false. Each Boolean variable occupies one byte of memory. Example \u00b6 boolean val = false ; // declaration of variable with type boolean and initialize it with false boolean state = true ; // declaration of variable with type boolean and initialize it with true } Char \u00b6 A data type that takes up one byte of memory that stores a character value. Character literals are written in single quotes like this: \u2018A\u2019 and for multiple characters, strings use double quotes: \u201cABC\u201d. However, characters are stored as numbers.This means that it is possible to do arithmetic operations on characters, in which the ASCII value of the character is used. For example, \u2018A\u2019 + 1 has the value 66, since the ASCII value of the capital letter A is 65. Example \u00b6 Char chr_a = \u2018a\u2019 ;//declaration of variable with type char and initialize it with character a Char chr_c = 97 ;//declaration of variable with type char and initialize it with character 97 Unsigned char \u00b6 Unsigned char is an unsigned data type that occupies one byte of memory. The unsigned char data type encodes numbers from 0 to 255. Example \u00b6 Unsigned Char chr_y = 121 ; // declaration of variable with type Unsigned char and initialize it with character y byte \u00b6 A byte stores an 8-bit unsigned number, from 0 to 255. Example \u00b6 byte m = 25 ;//declaration of variable with type byte and initialize it with 25 int \u00b6 Integers are the primary data-type for number storage. int stores a 16-bit (2-byte) value. This yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of (2^15) - 1). The int size varies from board to board. On the Arduino Due, for example, an int stores a 32-bit (4-byte) value. This yields a range of -2,147,483,648 to 2,147,483,647 (minimum value of -2^31 and a maximum value of (2^31) - 1). Example \u00b6 int counter = 32 ;// declaration of variable with type int and initialize it with 32 Unsigned int \u00b6 Unsigned ints (unsigned integers) are the same as int in the way that they store a 2 byte value. Instead of storing negative numbers, however, they only store positive values, yielding a useful range of 0 to 65,535 (2^16) - 1). The Due stores a 4 byte (32-bit) value, ranging from 0 to 4,294,967,295 (2^32 - 1). Example \u00b6 Unsigned int counter = 60 ; // declaration of variable with type unsigned int and initialize it with 60 Word \u00b6 On the Uno and other ATMEGA based boards, a word stores a 16-bit unsigned number. On the Due and Zero, it stores a 32-bit unsigned number. Example \u00b6 word w = 1000 ;//declaration of variable with type word and initialize it with 1000 Long \u00b6 Long variables are extended size variables for number storage, and store 32 bits (4 bytes), from -2,147,483,648 to 2,147,483,647. Example \u00b6 Long velocity = 102346 ;//declaration of variable with type Long and initialize it with 102346 unsigned long \u00b6 Unsigned long variables are extended size variables for number storage and store 32 bits (4 bytes). Unlike standard longs, unsigned longs will not store negative numbers, making their range from 0 to 4,294,967,295 (2^32 - 1). Example \u00b6 Unsigned Long velocity = 101006 ;// declaration of variable with type Unsigned Long and initialize it with 101006 short \u00b6 A short is a 16-bit data-type. On all Arduinos (ATMega and ARM based), a short stores a 16-bit (2-byte) value. This yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of (2^15) - 1). Example \u00b6 short val = 13 ;//declaration of variable with type short and initialize it with 13 float \u00b6 Data type for floating-point number is a number that has a decimal point. Floating-point numbers are often used to approximate the analog and continuous values because they have greater resolution than integers. Floating-point numbers can be as large as 3.4028235E+38 and as low as -3.4028235E+38. They are stored as 32 bits (4 bytes) of information. Example \u00b6 float num = 1.352;//declaration of variable with type float and initialize it with 1.352 double \u00b6 On the Uno and other ATMEGA based boards, Double precision floating-point number occupies four bytes. That is, the double implementation is exactly the same as the float, with no gain in precision. On the Arduino Due, doubles have 8-byte (64 bit) precision. Example \u00b6 double num = 45.352 ;// declaration of variable with type double and initialize it with 45.352","title":"Data Types"},{"location":"Chapter-2/Data%20Types/#data-types","text":"Data types in C refers to an extensive system used for declaring variables or functions of different types. The type of a variable determines how much space it occupies in the storage and how the bit pattern stored is interpreted. The following table provides all the data types that you will use during Arduino programming. void Boolean char Unsigned char byte int Unsigned int word long Unsigned long short float double array String-char array String-object","title":"Data Types"},{"location":"Chapter-2/Data%20Types/#void","text":"The void keyword is used only in function declarations. It indicates that the function is expected to return no information to the function from which it was called.","title":"void"},{"location":"Chapter-2/Data%20Types/#example","text":"Void Loop ( ) { // rest of the code }","title":"Example"},{"location":"Chapter-2/Data%20Types/#boolean","text":"A Boolean holds one of two values, true or false. Each Boolean variable occupies one byte of memory.","title":"Boolean"},{"location":"Chapter-2/Data%20Types/#example_1","text":"boolean val = false ; // declaration of variable with type boolean and initialize it with false boolean state = true ; // declaration of variable with type boolean and initialize it with true }","title":"Example"},{"location":"Chapter-2/Data%20Types/#char","text":"A data type that takes up one byte of memory that stores a character value. Character literals are written in single quotes like this: \u2018A\u2019 and for multiple characters, strings use double quotes: \u201cABC\u201d. However, characters are stored as numbers.This means that it is possible to do arithmetic operations on characters, in which the ASCII value of the character is used. For example, \u2018A\u2019 + 1 has the value 66, since the ASCII value of the capital letter A is 65.","title":"Char"},{"location":"Chapter-2/Data%20Types/#example_2","text":"Char chr_a = \u2018a\u2019 ;//declaration of variable with type char and initialize it with character a Char chr_c = 97 ;//declaration of variable with type char and initialize it with character 97","title":"Example"},{"location":"Chapter-2/Data%20Types/#unsigned-char","text":"Unsigned char is an unsigned data type that occupies one byte of memory. The unsigned char data type encodes numbers from 0 to 255.","title":"Unsigned char"},{"location":"Chapter-2/Data%20Types/#example_3","text":"Unsigned Char chr_y = 121 ; // declaration of variable with type Unsigned char and initialize it with character y","title":"Example"},{"location":"Chapter-2/Data%20Types/#byte","text":"A byte stores an 8-bit unsigned number, from 0 to 255.","title":"byte"},{"location":"Chapter-2/Data%20Types/#example_4","text":"byte m = 25 ;//declaration of variable with type byte and initialize it with 25","title":"Example"},{"location":"Chapter-2/Data%20Types/#int","text":"Integers are the primary data-type for number storage. int stores a 16-bit (2-byte) value. This yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of (2^15) - 1). The int size varies from board to board. On the Arduino Due, for example, an int stores a 32-bit (4-byte) value. This yields a range of -2,147,483,648 to 2,147,483,647 (minimum value of -2^31 and a maximum value of (2^31) - 1).","title":"int"},{"location":"Chapter-2/Data%20Types/#example_5","text":"int counter = 32 ;// declaration of variable with type int and initialize it with 32","title":"Example"},{"location":"Chapter-2/Data%20Types/#unsigned-int","text":"Unsigned ints (unsigned integers) are the same as int in the way that they store a 2 byte value. Instead of storing negative numbers, however, they only store positive values, yielding a useful range of 0 to 65,535 (2^16) - 1). The Due stores a 4 byte (32-bit) value, ranging from 0 to 4,294,967,295 (2^32 - 1).","title":"Unsigned int"},{"location":"Chapter-2/Data%20Types/#example_6","text":"Unsigned int counter = 60 ; // declaration of variable with type unsigned int and initialize it with 60","title":"Example"},{"location":"Chapter-2/Data%20Types/#word","text":"On the Uno and other ATMEGA based boards, a word stores a 16-bit unsigned number. On the Due and Zero, it stores a 32-bit unsigned number.","title":"Word"},{"location":"Chapter-2/Data%20Types/#example_7","text":"word w = 1000 ;//declaration of variable with type word and initialize it with 1000","title":"Example"},{"location":"Chapter-2/Data%20Types/#long","text":"Long variables are extended size variables for number storage, and store 32 bits (4 bytes), from -2,147,483,648 to 2,147,483,647.","title":"Long"},{"location":"Chapter-2/Data%20Types/#example_8","text":"Long velocity = 102346 ;//declaration of variable with type Long and initialize it with 102346","title":"Example"},{"location":"Chapter-2/Data%20Types/#unsigned-long","text":"Unsigned long variables are extended size variables for number storage and store 32 bits (4 bytes). Unlike standard longs, unsigned longs will not store negative numbers, making their range from 0 to 4,294,967,295 (2^32 - 1).","title":"unsigned long"},{"location":"Chapter-2/Data%20Types/#example_9","text":"Unsigned Long velocity = 101006 ;// declaration of variable with type Unsigned Long and initialize it with 101006","title":"Example"},{"location":"Chapter-2/Data%20Types/#short","text":"A short is a 16-bit data-type. On all Arduinos (ATMega and ARM based), a short stores a 16-bit (2-byte) value. This yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of (2^15) - 1).","title":"short"},{"location":"Chapter-2/Data%20Types/#example_10","text":"short val = 13 ;//declaration of variable with type short and initialize it with 13","title":"Example"},{"location":"Chapter-2/Data%20Types/#float","text":"Data type for floating-point number is a number that has a decimal point. Floating-point numbers are often used to approximate the analog and continuous values because they have greater resolution than integers. Floating-point numbers can be as large as 3.4028235E+38 and as low as -3.4028235E+38. They are stored as 32 bits (4 bytes) of information.","title":"float"},{"location":"Chapter-2/Data%20Types/#example_11","text":"float num = 1.352;//declaration of variable with type float and initialize it with 1.352","title":"Example"},{"location":"Chapter-2/Data%20Types/#double","text":"On the Uno and other ATMEGA based boards, Double precision floating-point number occupies four bytes. That is, the double implementation is exactly the same as the float, with no gain in precision. On the Arduino Due, doubles have 8-byte (64 bit) precision.","title":"double"},{"location":"Chapter-2/Data%20Types/#example_12","text":"double num = 45.352 ;// declaration of variable with type double and initialize it with 45.352","title":"Example"},{"location":"Chapter-2/Functions/","text":"Functions allow structuring the programs in segments of code to perform individual tasks. The typical case for creating a function is when one needs to perform the same action multiple times in a program. Standardizing code fragments into functions has several advantages \u2212 Functions help the programmer stay organized. Often this helps to conceptualize the program. Functions codify one action in one place so that the function only has to be thought about and debugged once. This also reduces chances for errors in modification, if the code needs to be changed. Functions make the whole sketch smaller and more compact because sections of code are reused many times. They make it easier to reuse code in other programs by making it modular, and using functions often makes the code more readable. There are two required functions in an Arduino sketch or a program i.e. setup () and loop(). Other functions must be created outside the brackets of these two functions. The most common syntax to define a function is Function Declaration \u00b6 A function is declared outside any other functions, above or below the loop function. We can declare the function in two different ways \u2212 The first way is just writing the part of the function called a function prototype above the loop function, which consists of \u2212 Function return type Function name Function argument type, no need to write the argument name Function prototype must be followed by a semicolon ( ; ). The following example shows the demonstration of the function declaration using the first method. Example \u00b6 int sum_func (int x, int y) // function declaration { int z = 0; z = x+y ; return z; // return the value } void setup () { Statements // group of statements } Void loop () { int result = 0 ; result = Sum_func (5,6) ; // function call } The second part, which is called the function definition or declaration, must be declared below the loop function, which consists of \u2212 Function return type Function name Function argument type, here you must add the argument name The function body (statements inside the function executing when the function is called) The following example demonstrates the declaration of function using the second method. Example \u00b6 int sum_func (int , int ) ; // function prototype void setup () { Statements // group of statements } void loop () { int result = 0 ; result = Sum_func (5,6) ; // function call } int sum_func (int x, int y) // function declaration { int z = 0; z = x+y ; return z; // return the value } The second method just declares the function above the loop function.","title":"Functions"},{"location":"Chapter-2/Functions/#function-declaration","text":"A function is declared outside any other functions, above or below the loop function. We can declare the function in two different ways \u2212 The first way is just writing the part of the function called a function prototype above the loop function, which consists of \u2212 Function return type Function name Function argument type, no need to write the argument name Function prototype must be followed by a semicolon ( ; ). The following example shows the demonstration of the function declaration using the first method.","title":"Function Declaration"},{"location":"Chapter-2/Functions/#example","text":"int sum_func (int x, int y) // function declaration { int z = 0; z = x+y ; return z; // return the value } void setup () { Statements // group of statements } Void loop () { int result = 0 ; result = Sum_func (5,6) ; // function call } The second part, which is called the function definition or declaration, must be declared below the loop function, which consists of \u2212 Function return type Function name Function argument type, here you must add the argument name The function body (statements inside the function executing when the function is called) The following example demonstrates the declaration of function using the second method.","title":"Example"},{"location":"Chapter-2/Functions/#example_1","text":"int sum_func (int , int ) ; // function prototype void setup () { Statements // group of statements } void loop () { int result = 0 ; result = Sum_func (5,6) ; // function call } int sum_func (int x, int y) // function declaration { int z = 0; z = x+y ; return z; // return the value } The second method just declares the function above the loop function.","title":"Example"},{"location":"Chapter-2/Loops/","text":"Loops \u00b6 Programming languages provide various control structures that allow for more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages \u2212 C programming language provides the following types of loops to handle looping requirements. while loop \u00b6 while loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false. Something must change the tested variable, or the while loop will never exit. while loop Syntax \u00b6 while(expression) { Block of statements; } do\u2026while loop \u00b6 The do\u2026while loop is similar to the while loop. In the while loop, the loop-continuation condition is tested at the beginning of the loop before performed the body of the loop. The do\u2026while statement tests the loop-continuation condition after performed the loop body. Therefore, the loop body will be executed at least once. When a do\u2026while terminates, execution continues with the statement after the while clause. It is not necessary to use braces in the do\u2026while statement if there is only one statement in the body. However, the braces are usually included to avoid confusion between the while and do\u2026while statements. do\u2026while loop Syntax \u00b6 do { Block of statements; } while (expression); for loop \u00b6 A for loop executes statements a predetermined number of times. The control expression for the loop is initialized, tested and manipulated entirely within the for loop parentheses. It is easy to debug the looping behavior of the structure as it is independent of the activity inside the loop. Each for loop has up to three expressions, which determine its operation. The following example shows general for loop syntax. Notice that the three expressions in the for loop argument parentheses are separated with semicolons. for loop Syntax \u00b6 for ( initialize; control; increment or decrement) { // statement block } Example \u00b6 for(counter = 2;counter <= 9;counter++) { //statements block will executed 10 times } nested loop \u00b6 C language allows you to use one loop inside another loop. The following example illustrates the concept. nested loop Syntax \u00b6 for ( initialize ;control; increment or decrement) { // statement block for ( initialize ;control; increment or decrement) { // statement block } } Example \u00b6 for(counter = 0;counter <= 9;counter++) { //statements block will executed 10 times for(i = 0;i <= 99;i++) { //statements block will executed 100 times } } infinite loop \u00b6 It is the loop having no terminating condition, so the loop becomes infinite. infinite loop Syntax \u00b6 Using for loop \u00b6 for (;;) { // statement block } Using while loop \u00b6 while(1) { // statement block } Using do\u2026while loop \u00b6 do { Block of statements; } while(1);","title":"Loops"},{"location":"Chapter-2/Loops/#loops","text":"Programming languages provide various control structures that allow for more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages \u2212 C programming language provides the following types of loops to handle looping requirements.","title":"Loops"},{"location":"Chapter-2/Loops/#while-loop","text":"while loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false. Something must change the tested variable, or the while loop will never exit.","title":"while loop"},{"location":"Chapter-2/Loops/#while-loop-syntax","text":"while(expression) { Block of statements; }","title":"while loop Syntax"},{"location":"Chapter-2/Loops/#dowhile-loop","text":"The do\u2026while loop is similar to the while loop. In the while loop, the loop-continuation condition is tested at the beginning of the loop before performed the body of the loop. The do\u2026while statement tests the loop-continuation condition after performed the loop body. Therefore, the loop body will be executed at least once. When a do\u2026while terminates, execution continues with the statement after the while clause. It is not necessary to use braces in the do\u2026while statement if there is only one statement in the body. However, the braces are usually included to avoid confusion between the while and do\u2026while statements.","title":"do\u2026while loop"},{"location":"Chapter-2/Loops/#dowhile-loop-syntax","text":"do { Block of statements; } while (expression);","title":"do\u2026while loop Syntax"},{"location":"Chapter-2/Loops/#for-loop","text":"A for loop executes statements a predetermined number of times. The control expression for the loop is initialized, tested and manipulated entirely within the for loop parentheses. It is easy to debug the looping behavior of the structure as it is independent of the activity inside the loop. Each for loop has up to three expressions, which determine its operation. The following example shows general for loop syntax. Notice that the three expressions in the for loop argument parentheses are separated with semicolons.","title":"for loop"},{"location":"Chapter-2/Loops/#for-loop-syntax","text":"for ( initialize; control; increment or decrement) { // statement block }","title":"for loop Syntax"},{"location":"Chapter-2/Loops/#example","text":"for(counter = 2;counter <= 9;counter++) { //statements block will executed 10 times }","title":"Example"},{"location":"Chapter-2/Loops/#nested-loop","text":"C language allows you to use one loop inside another loop. The following example illustrates the concept.","title":"nested loop"},{"location":"Chapter-2/Loops/#nested-loop-syntax","text":"for ( initialize ;control; increment or decrement) { // statement block for ( initialize ;control; increment or decrement) { // statement block } }","title":"nested loop Syntax"},{"location":"Chapter-2/Loops/#example_1","text":"for(counter = 0;counter <= 9;counter++) { //statements block will executed 10 times for(i = 0;i <= 99;i++) { //statements block will executed 100 times } }","title":"Example"},{"location":"Chapter-2/Loops/#infinite-loop","text":"It is the loop having no terminating condition, so the loop becomes infinite.","title":"infinite loop"},{"location":"Chapter-2/Loops/#infinite-loop-syntax","text":"","title":"infinite loop Syntax"},{"location":"Chapter-2/Loops/#using-for-loop","text":"for (;;) { // statement block }","title":"Using for loop"},{"location":"Chapter-2/Loops/#using-while-loop","text":"while(1) { // statement block }","title":"Using while loop"},{"location":"Chapter-2/Loops/#using-dowhile-loop","text":"do { Block of statements; } while(1);","title":"Using do\u2026while loop"},{"location":"Chapter-2/Operators/","text":"An operator is a symbol that tells the compiler to perform specific mathematical or logical functions. C language is rich in built-in operators and provides the following types of operators \u2212 Arithmetic Operators Comparison Operators Boolean Operators Bitwise Operators Compound Operators Arithmetic Operators \u00b6 Operator name Operator simple Description Example assignment operator = Stores the value to the right of the equal sign in the variable to the left of the equal sign. A = B addition + Adds two operands A + B will give 30 subtraction - Subtracts second operand from the first A - B will give -10 multiplication * Multiply both operands A * B will give 200 division / Divide numerator by denominator B / A will give 2 modulo % Modulus Operator and remainder of after an integer division B % A will give 0 Example \u00b6 void loop () { int a = 9,b = 4,c; c = a + b; c = a - b; c = a * b; c = a / b; c = a % b; } Result \u00b6 a + b = 13 a - b = 5 a * b = 36 a / b = 2 Remainder when a divided by b = 1 Comparison Operators \u00b6 Assume variable A holds 10 and variable B holds 20 then Operator name Operator simple Description Example equal to == Checks if the value of two operands is equal or not, if yes then condition becomes true. (A == B) is not true not equal to != Checks if the value of two operands is equal or not, if values are not equal then condition becomes true. (A != B) is true less than < Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. (A < B) is true greater than > Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true. (A > B) is not true less than or equal to <= Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true. (A <= B) is true greater than or equal to >= Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true. (A >= B) is not true Example \u00b6 void loop () { int a = 9,b = 4 bool c = false; if(a == b) c = true; else c = false; if(a != b) c = true; else c = false; if(a < b) c = true; else c = false; if(a > b) c = true; else c = false; if(a <= b) c = true; else c = false; if(a >= b) c = true; else c = false; } Result \u00b6 c = false c = true c = false c = true c = false c = false Boolean Operators \u00b6 Assume variable A holds 10 and variable B holds 20 then \u2212 Operator name Operator simple Description Example and && Called Logical AND operator. If both the operands are non-zero then then condition becomes true. (A && B) is true or || Called Logical OR Operator. If any of the two operands is non-zero then then condition becomes true. (A || B) is true not ! Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false. !(A && B) is false Example \u00b6 void loop () { int a = 9,b = 4 bool c = false; if((a > b)&& (b < a)) c = true; else c = false; if((a == b)|| (b < a)) c = true; else c = false; if( !(a == b)&& (b < a)) c = true; else c = false; } Result \u00b6 c = true c = true c = true Bitwise Operators \u00b6 Assume variable A holds 60 and variable B holds 13 then \u2212 Operator name Operator simple Description Example and & Binary AND Operator copies a bit to the result if it exists in both operands. (A & B) will give 12 which is 0000 1100 or | Binary OR Operator copies a bit if it exists in either operand (A | B) will give 61 which is 0011 1101 xor ^ Binary XOR Operator copies the bit if it is set in one operand but not both. (A ^ B) will give 49 which is 0011 0001 not ~ Binary Ones Complement Operator is unary and has the effect of \u2018flipping\u2019 bits. (~A ) will give -60 which is 1100 0011 shift left << Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand. A << 2 will give 240 which is 1111 0000 shift right >> Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. A >> 2 will give 15 which is 0000 1111 Example \u00b6 void loop () { int a = 10,b = 20 int c = 0; c = a & b ; c = a | b ; c = a ^ b ; c = a ~ b ; c = a << b ; c = a >> b ; } Result \u00b6 c = 12 c = 61 c = 49 c = -60 c = 240 c = 15 Compound Operators \u00b6 Assume variable A holds 10 and variable B holds 20 then \u2212 Operator name Operator simple Description Example increment ++ Increment operator, increases integer value by one A++ will give 11 decrement \u2013 Decrement operator, decreases integer value by one A\u2013 will give 9 compound addition += Add AND assignment operator. It adds right operand to the left operand and assign the result to left operand B += A is equivalent to B = B+ A compound subtraction -= Subtract AND assignment operator. It subtracts right operand from the left operand and assign the result to left operand B -= A is equivalent to B = B - A compound multiplication *= Multiply AND assignment operator. It multiplies right operand with the left operand and assign the result to left operand B = A is equivalent to B = B A compound division /= Divide AND assignment operator. It divides left operand with the right operand and assign the result to left operand B /= A is equivalent to B = B / A compound modulo %= Modulus AND assignment operator. It takes modulus using two operands and assign the result to left operand B %= A is equivalent to B = B % A compound bitwise or |= bitwise inclusive OR and assignment operator A |= 2 is same as A = A | 2 compound bitwise and &= Bitwise AND assignment operator A &= 2 is same as A = A & 2 Example \u00b6 void loop () { int a = 10,b = 20 int c = 0; a++; a--; b += a; b -= a; b *= a; b /= a; a %= b; a |= b; a &= b; } Result \u00b6 a = 11 a = 9 b = 30 b = 10 b = 200 b = 2 a = 0 a = 0 a = 30 \u00b6","title":"Operators"},{"location":"Chapter-2/Operators/#arithmetic-operators","text":"Operator name Operator simple Description Example assignment operator = Stores the value to the right of the equal sign in the variable to the left of the equal sign. A = B addition + Adds two operands A + B will give 30 subtraction - Subtracts second operand from the first A - B will give -10 multiplication * Multiply both operands A * B will give 200 division / Divide numerator by denominator B / A will give 2 modulo % Modulus Operator and remainder of after an integer division B % A will give 0","title":"Arithmetic Operators"},{"location":"Chapter-2/Operators/#example","text":"void loop () { int a = 9,b = 4,c; c = a + b; c = a - b; c = a * b; c = a / b; c = a % b; }","title":"Example"},{"location":"Chapter-2/Operators/#result","text":"a + b = 13 a - b = 5 a * b = 36 a / b = 2 Remainder when a divided by b = 1","title":"Result"},{"location":"Chapter-2/Operators/#comparison-operators","text":"Assume variable A holds 10 and variable B holds 20 then Operator name Operator simple Description Example equal to == Checks if the value of two operands is equal or not, if yes then condition becomes true. (A == B) is not true not equal to != Checks if the value of two operands is equal or not, if values are not equal then condition becomes true. (A != B) is true less than < Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. (A < B) is true greater than > Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true. (A > B) is not true less than or equal to <= Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true. (A <= B) is true greater than or equal to >= Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true. (A >= B) is not true","title":"Comparison Operators"},{"location":"Chapter-2/Operators/#example_1","text":"void loop () { int a = 9,b = 4 bool c = false; if(a == b) c = true; else c = false; if(a != b) c = true; else c = false; if(a < b) c = true; else c = false; if(a > b) c = true; else c = false; if(a <= b) c = true; else c = false; if(a >= b) c = true; else c = false; }","title":"Example"},{"location":"Chapter-2/Operators/#result_1","text":"c = false c = true c = false c = true c = false c = false","title":"Result"},{"location":"Chapter-2/Operators/#boolean-operators","text":"Assume variable A holds 10 and variable B holds 20 then \u2212 Operator name Operator simple Description Example and && Called Logical AND operator. If both the operands are non-zero then then condition becomes true. (A && B) is true or || Called Logical OR Operator. If any of the two operands is non-zero then then condition becomes true. (A || B) is true not ! Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false. !(A && B) is false","title":"Boolean Operators"},{"location":"Chapter-2/Operators/#example_2","text":"void loop () { int a = 9,b = 4 bool c = false; if((a > b)&& (b < a)) c = true; else c = false; if((a == b)|| (b < a)) c = true; else c = false; if( !(a == b)&& (b < a)) c = true; else c = false; }","title":"Example"},{"location":"Chapter-2/Operators/#result_2","text":"c = true c = true c = true","title":"Result"},{"location":"Chapter-2/Operators/#bitwise-operators","text":"Assume variable A holds 60 and variable B holds 13 then \u2212 Operator name Operator simple Description Example and & Binary AND Operator copies a bit to the result if it exists in both operands. (A & B) will give 12 which is 0000 1100 or | Binary OR Operator copies a bit if it exists in either operand (A | B) will give 61 which is 0011 1101 xor ^ Binary XOR Operator copies the bit if it is set in one operand but not both. (A ^ B) will give 49 which is 0011 0001 not ~ Binary Ones Complement Operator is unary and has the effect of \u2018flipping\u2019 bits. (~A ) will give -60 which is 1100 0011 shift left << Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand. A << 2 will give 240 which is 1111 0000 shift right >> Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. A >> 2 will give 15 which is 0000 1111","title":"Bitwise Operators"},{"location":"Chapter-2/Operators/#example_3","text":"void loop () { int a = 10,b = 20 int c = 0; c = a & b ; c = a | b ; c = a ^ b ; c = a ~ b ; c = a << b ; c = a >> b ; }","title":"Example"},{"location":"Chapter-2/Operators/#result_3","text":"c = 12 c = 61 c = 49 c = -60 c = 240 c = 15","title":"Result"},{"location":"Chapter-2/Operators/#compound-operators","text":"Assume variable A holds 10 and variable B holds 20 then \u2212 Operator name Operator simple Description Example increment ++ Increment operator, increases integer value by one A++ will give 11 decrement \u2013 Decrement operator, decreases integer value by one A\u2013 will give 9 compound addition += Add AND assignment operator. It adds right operand to the left operand and assign the result to left operand B += A is equivalent to B = B+ A compound subtraction -= Subtract AND assignment operator. It subtracts right operand from the left operand and assign the result to left operand B -= A is equivalent to B = B - A compound multiplication *= Multiply AND assignment operator. It multiplies right operand with the left operand and assign the result to left operand B = A is equivalent to B = B A compound division /= Divide AND assignment operator. It divides left operand with the right operand and assign the result to left operand B /= A is equivalent to B = B / A compound modulo %= Modulus AND assignment operator. It takes modulus using two operands and assign the result to left operand B %= A is equivalent to B = B % A compound bitwise or |= bitwise inclusive OR and assignment operator A |= 2 is same as A = A | 2 compound bitwise and &= Bitwise AND assignment operator A &= 2 is same as A = A & 2","title":"Compound Operators"},{"location":"Chapter-2/Operators/#example_4","text":"void loop () { int a = 10,b = 20 int c = 0; a++; a--; b += a; b -= a; b *= a; b /= a; a %= b; a |= b; a &= b; }","title":"Example"},{"location":"Chapter-2/Operators/#result_4","text":"a = 11 a = 9 b = 30 b = 10 b = 200 b = 2 a = 0 a = 0 a = 30","title":"Result"},{"location":"Chapter-2/Operators/#_1","text":"","title":""},{"location":"Chapter-2/Program%20Structure/","text":"Program Structure \u00b6 In this chapter, we will study in depth, the Arduino program structure and we will learn more new terminologies used in the Arduino world. The Arduino software is open-source. The source code for the Java environment is released under the GPL and the C/C++ microcontroller libraries are under the LGPL. Sketch \u2212 The first new terminology is the Arduino program called \u201csketch\u201d . Structure \u00b6 Arduino programs can be divided in three main parts: Structure, Values (variables and constants), and Functions . In this tutorial, we will learn about the Arduino software program, step by step, and how we can write the program without any syntax or compilation error. Let us start with the Structure. Software structure consist of two main functions \u2212 Setup( ) function Loop( ) function void setup ( ) { } PURPOSE \u2212 The setup() function is called when a sketch starts. Use it to initialize the variables, pin modes, start using libraries, etc. The setup function will only run once, after each power up or reset of the Arduino board. void loop ( ) { } PURPOSE \u2212 After creating a setup() function, which initializes and sets the initial values, the loop() function does precisely what its name suggests, and loops consecutively, allowing your program to change and respond. Use it to actively control the Arduino board.","title":"Program Structure"},{"location":"Chapter-2/Program%20Structure/#program-structure","text":"In this chapter, we will study in depth, the Arduino program structure and we will learn more new terminologies used in the Arduino world. The Arduino software is open-source. The source code for the Java environment is released under the GPL and the C/C++ microcontroller libraries are under the LGPL. Sketch \u2212 The first new terminology is the Arduino program called \u201csketch\u201d .","title":"Program Structure"},{"location":"Chapter-2/Program%20Structure/#structure","text":"Arduino programs can be divided in three main parts: Structure, Values (variables and constants), and Functions . In this tutorial, we will learn about the Arduino software program, step by step, and how we can write the program without any syntax or compilation error. Let us start with the Structure. Software structure consist of two main functions \u2212 Setup( ) function Loop( ) function void setup ( ) { } PURPOSE \u2212 The setup() function is called when a sketch starts. Use it to initialize the variables, pin modes, start using libraries, etc. The setup function will only run once, after each power up or reset of the Arduino board. void loop ( ) { } PURPOSE \u2212 After creating a setup() function, which initializes and sets the initial values, the loop() function does precisely what its name suggests, and loops consecutively, allowing your program to change and respond. Use it to actively control the Arduino board.","title":"Structure"},{"location":"Chapter-2/Time/","text":"Arduino provides four different time manipulation functions. They are delay () function \u00b6 The way the delay() function works is pretty simple. It accepts a single integer (or number) argument. This number represents the time (measured in milliseconds). The program should wait until moving on to the next line of code when it encounters this function. However, the problem is, the delay() function is not a good way to make your program wait, because it is known as a \u201cblocking\u201d function. delay() function Syntax \u00b6 delay (ms) ; where, ms is the time in milliseconds to pause (unsigned long). Example \u00b6 /* Flashing LED * ------------ * Turns on and off a light emitting diode(LED) connected to a digital * pin, in intervals of 2 seconds. * */ int ledPin = 13; // LED connected to digital pin 13 void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin as output } void loop() { digitalWrite(ledPin, HIGH); // sets the LED on delay(1000); // waits for a second digitalWrite(ledPin, LOW); // sets the LED off delay(1000); // waits for a second } delayMicroseconds () function \u00b6 The delayMicroseconds() function accepts a single integer (or number) argument. This number represents the time and is measured in microseconds. There are a thousand microseconds in a millisecond, and a million microseconds in a second. Currently, the largest value that can produce an accurate delay is 16383. This may change in future Arduino releases. For delays longer than a few thousand microseconds, you should use the delay() function instead. delayMicroseconds() function Syntax \u00b6 delayMicroseconds (us) ; where, us is the number of microseconds to pause (unsigned int) Example \u00b6 /* Flashing LED * ------------ * Turns on and off a light emitting diode(LED) connected to a digital * pin, in intervals of 1 seconds. * */ int ledPin = 13; // LED connected to digital pin 13 void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin as output } void loop() { digitalWrite(ledPin, HIGH); // sets the LED on delayMicroseconds(1000); // waits for a second digitalWrite(ledPin, LOW); // sets the LED off delayMicroseconds(1000); // waits for a second } millis () function \u00b6 This function is used to return the number of milliseconds at the time, the Arduino board begins running the current program. This number overflows i.e. goes back to zero after approximately 50 days. millis() function Syntax \u00b6 millis () ; This function returns milliseconds from the start of the program. Example \u00b6 unsigned long time; void setup() { Serial.begin(9600); } void loop() { Serial.print(\"Time:\"); time = millis(); //prints time since program started Serial.println(time); // wait a second so as not to send massive amounts of data delay(1000); } micros () function \u00b6 The micros() function returns the number of microseconds from the time, the Arduino board begins running the current program. This number overflows i.e. goes back to zero after approximately 70 minutes. On 16 MHz Arduino boards (e.g. Duemilanove and Nano), this function has a resolution of four microseconds (i.e. the value returned is always a multiple of four). On 8 MHz Arduino boards (e.g. the LilyPad), this function has a resolution of eight microseconds. micros() function Syntax \u00b6 micros () ; This function returns number of microseconds since the program started (unsigned long) Example \u00b6 unsigned long time; void setup() { Serial.begin(9600); } void loop() { Serial.print(\"Time:\"); time = micros(); //prints time since program started Serial.println(time); // wait a second so as not to send massive amounts of data delay(1000); }","title":"Time"},{"location":"Chapter-2/Time/#delay-function","text":"The way the delay() function works is pretty simple. It accepts a single integer (or number) argument. This number represents the time (measured in milliseconds). The program should wait until moving on to the next line of code when it encounters this function. However, the problem is, the delay() function is not a good way to make your program wait, because it is known as a \u201cblocking\u201d function.","title":"delay () function"},{"location":"Chapter-2/Time/#delay-function-syntax","text":"delay (ms) ; where, ms is the time in milliseconds to pause (unsigned long).","title":"delay() function Syntax"},{"location":"Chapter-2/Time/#example","text":"/* Flashing LED * ------------ * Turns on and off a light emitting diode(LED) connected to a digital * pin, in intervals of 2 seconds. * */ int ledPin = 13; // LED connected to digital pin 13 void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin as output } void loop() { digitalWrite(ledPin, HIGH); // sets the LED on delay(1000); // waits for a second digitalWrite(ledPin, LOW); // sets the LED off delay(1000); // waits for a second }","title":"Example"},{"location":"Chapter-2/Time/#delaymicroseconds-function","text":"The delayMicroseconds() function accepts a single integer (or number) argument. This number represents the time and is measured in microseconds. There are a thousand microseconds in a millisecond, and a million microseconds in a second. Currently, the largest value that can produce an accurate delay is 16383. This may change in future Arduino releases. For delays longer than a few thousand microseconds, you should use the delay() function instead.","title":"delayMicroseconds () function"},{"location":"Chapter-2/Time/#delaymicroseconds-function-syntax","text":"delayMicroseconds (us) ; where, us is the number of microseconds to pause (unsigned int)","title":"delayMicroseconds() function Syntax"},{"location":"Chapter-2/Time/#example_1","text":"/* Flashing LED * ------------ * Turns on and off a light emitting diode(LED) connected to a digital * pin, in intervals of 1 seconds. * */ int ledPin = 13; // LED connected to digital pin 13 void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin as output } void loop() { digitalWrite(ledPin, HIGH); // sets the LED on delayMicroseconds(1000); // waits for a second digitalWrite(ledPin, LOW); // sets the LED off delayMicroseconds(1000); // waits for a second }","title":"Example"},{"location":"Chapter-2/Time/#millis-function","text":"This function is used to return the number of milliseconds at the time, the Arduino board begins running the current program. This number overflows i.e. goes back to zero after approximately 50 days.","title":"millis () function"},{"location":"Chapter-2/Time/#millis-function-syntax","text":"millis () ; This function returns milliseconds from the start of the program.","title":"millis() function Syntax"},{"location":"Chapter-2/Time/#example_2","text":"unsigned long time; void setup() { Serial.begin(9600); } void loop() { Serial.print(\"Time:\"); time = millis(); //prints time since program started Serial.println(time); // wait a second so as not to send massive amounts of data delay(1000); }","title":"Example"},{"location":"Chapter-2/Time/#micros-function","text":"The micros() function returns the number of microseconds from the time, the Arduino board begins running the current program. This number overflows i.e. goes back to zero after approximately 70 minutes. On 16 MHz Arduino boards (e.g. Duemilanove and Nano), this function has a resolution of four microseconds (i.e. the value returned is always a multiple of four). On 8 MHz Arduino boards (e.g. the LilyPad), this function has a resolution of eight microseconds.","title":"micros () function"},{"location":"Chapter-2/Time/#micros-function-syntax","text":"micros () ; This function returns number of microseconds since the program started (unsigned long)","title":"micros() function Syntax"},{"location":"Chapter-2/Time/#example_3","text":"unsigned long time; void setup() { Serial.begin(9600); } void loop() { Serial.print(\"Time:\"); time = micros(); //prints time since program started Serial.println(time); // wait a second so as not to send massive amounts of data delay(1000); }","title":"Example"},{"location":"Chapter-2/Variables%20and%20Constants/","text":"Scope of a Variable \u00b6 Variables in C programming language, which Arduino uses, have a property called scope. A scope is a region of the program and there are three places where variables can be declared. They are Inside a function or a block, which is called local variables. In the definition of function parameters, which is called formal parameters. Outside of all functions, which is called global variables. Local Variables \u00b6 Variables that are declared inside a function or block are local variables. They can be used only by the statements that are inside that function or block of code. Local variables are not known to function outside their own. Following is the example using local variables \u2212 void setup () { } void loop () { int x , y ; int z ; Local variable declaration x = 0; y = 0; actual initialization z = 10; } Global Variables \u00b6 Global variables are defined outside of all the functions, usually at the top of the program. The global variables will hold their value throughout the life-time of your program. A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. The following example uses global and local variables \u2212 Int T , S ; float c = 0 ; Global variable declaration void setup () { } void loop () { int x , y ; int z ; Local variable declaration x = 0; y = 0; actual initialization z = 10; }","title":"Scope of a Variable"},{"location":"Chapter-2/Variables%20and%20Constants/#scope-of-a-variable","text":"Variables in C programming language, which Arduino uses, have a property called scope. A scope is a region of the program and there are three places where variables can be declared. They are Inside a function or a block, which is called local variables. In the definition of function parameters, which is called formal parameters. Outside of all functions, which is called global variables.","title":"Scope of a Variable"},{"location":"Chapter-2/Variables%20and%20Constants/#local-variables","text":"Variables that are declared inside a function or block are local variables. They can be used only by the statements that are inside that function or block of code. Local variables are not known to function outside their own. Following is the example using local variables \u2212 void setup () { } void loop () { int x , y ; int z ; Local variable declaration x = 0; y = 0; actual initialization z = 10; }","title":"Local Variables"},{"location":"Chapter-2/Variables%20and%20Constants/#global-variables","text":"Global variables are defined outside of all the functions, usually at the top of the program. The global variables will hold their value throughout the life-time of your program. A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. The following example uses global and local variables \u2212 Int T , S ; float c = 0 ; Global variable declaration void setup () { } void loop () { int x , y ; int z ; Local variable declaration x = 0; y = 0; actual initialization z = 10; }","title":"Global Variables"}]}